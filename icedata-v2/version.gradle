class ApplicationVersion {
    Integer major
    Integer minor
    Integer patch
    Boolean release

    ApplicationVersion(Integer major, Integer minor, Integer patch, Boolean release) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.release = release
    }

    private String getRelease() {
        return this.release ? '' : '-SNAPSHOT'
    }

    String getVersion() {
        return "$major.$minor.$patch" + this.getRelease()
    }
}

ext.loadVersion = { ->
    def versionPropertiesFile = file('version.properties')

    if(!versionPropertiesFile.exists()) {
        throw new Exception('No version.properties file found')
    }

    Properties versionProperties = new Properties()

    versionPropertiesFile.withInputStream { stream ->
        versionProperties.load(stream)
    }
    return new ApplicationVersion(versionProperties.major.toInteger(),
            versionProperties.minor.toInteger(),
            versionProperties.patch.toInteger(),
            versionProperties.release.toBoolean())
}

tasks.register('majorVersionUpdate') {
    group='versioning'
    description=
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'major', type: 'int', operation: '+', value: 1)
            entry(key: 'minor', type: 'int', operation: '=', value: 0)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
        }
    }
}

tasks.register('minorVersionUpdate') {
    group='versioning'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'minor', type: 'int', operation: '+', value: 1)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
        }
    }
}

tasks.register('patchVersionUpdate') {
    group='versioning'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'patch', type: 'int', operation: '+', value: 1)
        }
    }
}

tasks.register('releaseVersion') {
    group='versioning'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

tasks.register('preReleaseVersion') {
    group='versioning'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'false')
        }
    }
}